name: Module Versioning
concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  pull_request_target:
    types: [closed]

jobs:
  detect:
    runs-on: ubuntu-latest
    name: 'Detect pull request context'
    outputs:
      directories: ${{ steps.condense.outputs.result }}
      release-type: ${{ steps.check_pr_label.outputs.release-type}}
      is-merge-event: >-
        ${{ github.event_name == 'pull_request_target'
         && github.event.action == 'closed'
         && github.event.pull_request.merged == true }}
    steps:
        # I'm getting the labels from the API and not the context("contains(github.event.pull_request.labels.*.name, 'Env Promote')") as the labels
        # are added in 2nd API call so they aren't included in the PR context
      - name: Check PR labels
        id: check_pr_label
        env:
          PR_URL: ${{github.event.pull_request.html_url}} #TODO: check if needed (we don't checkout the code..)
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          LABELS=$(gh pr view $PR_URL --json labels  --jq '.labels[]| select((.name=="minor") or (.name=="major") or (.name=="patch") or (.name=="no-release")) |.name')
          NUMBER_OF_LABELS=$(echo "$LABELS" |wc -w)
          if [ "$NUMBER_OF_LABELS" -eq "1" ] ; then
            echo "Found: $LABELS"
            echo "::set-output name=release-type::$LABELS"
          elif [ "$NUMBER_OF_LABELS" -gt "1" ] ; then
            echo "::error ::Too many release type labels: $( echo $LABELS | tr '\n' ' ' )"
            exit 1
          else
            echo "::error ::No release type labels found(patch/minor/major/no-release)"
            exit 2
          fi
      - name: Get changed files
        uses: Ana06/get-changed-files@v1.2
        id: raw-files
        with:
          format: 'json'


  plan:
    needs: detect
    if: ${{ needs.detect.outputs.directories != '{}' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    name: 'Module: ${{ matrix.directory }}'
    steps:
      - name: Detect previous version number
        uses: actions/github-script@v4
        id: prev-version
        with:
          script: |
            const { owner, repo } = context.repo;
            const query = `query($owner: String!, $repo: String!, $refPrefix: String!) {
              repository(owner: $owner, name: $repo) {
                refs(refPrefix: $refPrefix, first: 1, orderBy: {field: TAG_COMMIT_DATE, direction: DESC}) {
                  edges { node { name } }
                }
              }
            }`;
            const result = await github.graphql(query, { owner, repo,
              refPrefix: `refs/tags/`,
            });
            const prevNode = result.repository.refs.edges[0];
            const prevVer = prevNode ? prevNode.node.name : '0.0.0';
            console.log('Found previous version', prevVer);
            return prevVer;
          result-encoding: string

      - name: Determine new version number
        uses: actions/github-script@v4
        id: new-version
        env:
          PREV_VERSION: '${{ steps.prev-version.outputs.result }}'
          RELEASE_TYPE: '${{ needs.detect.outputs.release-type }}'
        with:
          script: |
            const { PREV_VERSION, RELEASE_TYPE } = process.env;
            console.log('Previous version was', PREV_VERSION);
            console.log('Release type is', RELEASE_TYPE);
            const numbers = PREV_VERSION.split('.');
            const numberIdx = ['major', 'minor', 'patch'].indexOf(RELEASE_TYPE);
            numbers[numberIdx] = parseInt(numbers[numberIdx]) + 1;
            for (let i = numberIdx + 1; i < numbers.length; i++) {
              numbers[i] = 0;
            }
            return numbers.join('.');
          result-encoding: string
      - name: Store version numbers
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          mkdir output
          echo '${{ steps.prev-version.outputs.result }}' > output/previous-version.txt
          echo '${{ steps.new-version.outputs.result }}' > output/new-version.txt
  
  comment:
    needs: [detect, plan]
    if: needs.detect.outputs.is-merge-event == 'false'
    runs-on: ubuntu-latest
    name: 'Comment on PR'
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: outputs
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: outputs

      - uses: actions/github-script@v2
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            const { readdir, readFile } = require('fs').promises;
            const utf8 = { encoding: 'utf-8' };
            const lines = [
              '# Release plan', '',
              '| Directory | Previous version | New version |',
              '|--|--|--|',
            ];
            const sections = [];
            for (const folder of await readdir('outputs', { withFileTypes: true })) {
              if (!folder.isDirectory()) continue;
              const readText = (name) => readFile(name, utf8).then(x => x.trim());
              lines.push('| '+[
                `\`${folder.name}\``,
                `${await readText(`outputs/${folder.name}/previous-version.txt`)}`,
                `**${await readText(`outputs/${folder.name}/new-version.txt`)}**`,
              ].join(' | ')+' |');
              sections.push(`<details><summary>Changelog preview: ${folder.name}</summary>\n\n${await readText(`outputs/${folder.name}/changelog.md`)}\n</details>`);
            }
            const finalBody = [lines.join('\n'), ...sections].join('\n\n');
            const {data: allComments} = await github.issues.listComments({ issue_number, owner, repo });
            const ourComments = allComments
              .filter(comment => comment.user.login === 'github-actions[bot]')
              .filter(comment => comment.body.startsWith(lines[0]+'\n'));
            const latestComment = ourComments.slice(-1)[0];
            if (latestComment && latestComment.body === finalBody) {
              console.log('Existing comment is already up to date.');
              return;
            }
            const {data: newComment} = await github.issues.createComment({ issue_number, owner, repo, body: finalBody });
            console.log('Posted comment', newComment.id, '@', newComment.html_url);
            // Delete all our previous comments
            for (const comment of ourComments) {
              if (comment.id === newComment.id) continue;
              console.log('Deleting previous PR comment from', comment.created_at);
              await github.issues.deleteComment({ comment_id: comment.id, owner, repo });
            }
