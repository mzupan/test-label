name: Module Versioning Validation
concurrency: 
  group: ${{ github.head_ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  pull_request_target:
    types: [closed]

jobs:
  semver_check:
    runs-on: ubuntu-latest
    name: 'Check SemVer Label'
    outputs:
      directories: ${{ steps.condense.outputs.result }}
      release-type: ${{ steps.check_pr_label.outputs.release-type}}
      is-merge-event: >-
        ${{ github.event_name == 'pull_request_target'
         && github.event.action == 'closed'
         && github.event.pull_request.merged == true }}
    steps:
      - name: Check PR labels
        id: check_pr_label
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          LABELS=$(gh pr view $PR_URL --json labels  --jq '.labels[]| select((.name=="minor") or (.name=="major") or (.name=="patch") or (.name=="no-release")) |.name')
          NUMBER_OF_LABELS=$(echo "$LABELS" |wc -w)
          if [ "$NUMBER_OF_LABELS" -eq "1" ] ; then
            echo "Found: $LABELS"
            echo "::set-output name=release-type::$LABELS"
          elif [ "$NUMBER_OF_LABELS" -gt "1" ] ; then
            echo "::error ::Too many release type labels: $( echo $LABELS | tr '\n' ' ' )"
            exit 1
          else
            echo "::error ::No release type labels found(patch/minor/major/no-release)"
            exit 2
          fi

  pr_body_check:
    runs-on: ubuntu-latest
    name: 'Check PR Body Contents'
    outputs:
      directories: ${{ steps.condense.outputs.result }}
      release-type: ${{ steps.check_pr_label.outputs.release-type}}
      is-merge-event: >-
        ${{ github.event_name == 'pull_request_target'
         && github.event.action == 'closed'
         && github.event.pull_request.merged == true }}
    steps:
      - name: Check for text in the Body
        uses: actions/github-script@v5
        with:
          script: |
            const { owner, repo } = context.repo;
            const { data: prInfo } = await github.rest.pulls.get({
              owner, repo,
              pull_number: context.issue.number,
            });
            console.log('Found PR body:|');
            console.log(prInfo.body);
            const changelogEntry = prInfo.body
            if (!changelogEntry)
              throw `'Changelog' section not found in PR body! Please add it back.`;
            
      - name: Get changed files
        uses: Ana06/get-changed-files@v1.2
        id: raw-files
        with:
          format: 'json'
